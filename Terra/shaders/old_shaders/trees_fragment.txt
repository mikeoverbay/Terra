// trees_fragment.txt
// used to render trees
uniform sampler2D normalMap;
uniform sampler2D colorMap;
uniform int enable_fog;
uniform float l_texture;
uniform int is_bumped;
uniform float gamma;
varying vec2 texCoord;
varying vec3 norm;
varying vec3 halfVector;
varying float ln;
varying vec4 vColor;
void main (void)
{
vec3 halfV,lightDir;
float NdotL;
 
lightDir = normalize( gl_LightSource[0].position.xyz);
halfV = normalize(halfVector);

lightDir.x *= -1.0;
vec3 n = normalize(norm);
	
vec4 base = texture2D(colorMap,  texCoord);
if ( base.a <0.5 ) { discard; }
base.xyz *= l_texture;


vec3 bump = texture2D(normalMap, texCoord).rgb * 2.0 - 1.0;
float alpha_ch = texture2D(normalMap, texCoord).a ;
vec3 tb = bump;
bump.z = tb.z;
bump.y = -tb.y;
bump.x = tb.x;
bump =  normalize(bump)*1.0;
	//----------------------------------------
	vec4 Ambient = vec4( 0.5 ,0.5 , 0.5 , 0.0);
	vec4 color = Ambient;


// calculate bump
float diffuse =  max(dot(bump , lightDir.xyz), 0.0);

base *=2.0;

float specular= clamp( dot(reflect(lightDir.xyz, -bump * ln), halfV), 0.0, 0.5);

NdotL = max(dot(n, lightDir.xzy),0.0);
specular *= alpha_ch ;
  if (NdotL > 0.0) {
     color += Ambient * NdotL;
   }
	
gl_FragColor = base * ( (color *0.7) + (diffuse *color ) + specular ) *ln;
gl_FragColor += (base * color*1.0) *(1.0-ln);
gl_FragColor += vColor;
// gamma correction
vec3 vG = vec3(1.5 , 1.5 , 1.5);
gl_FragColor.rgb *= 1.3;
gl_FragColor.rgb = pow(gl_FragColor.rgb, vG/gamma);

//======================================================
//Debug junk
//gl_FragColor.xyz =  ( (color *0.3) + (diffuse *color * 0.5));

//gl_FragColor.xyz = bump;
//======================================================

// FOG calculation
 const float LOG2 = 1.442695;

float z = gl_FragCoord.z / gl_FragCoord.w;
float fogFactor = exp2( -gl_Fog.density * gl_Fog.density * z * z * LOG2 );
fogFactor = clamp(fogFactor, 0.0, 1.0);
if (enable_fog == 1)
{
gl_FragColor = mix(gl_Fog.color, gl_FragColor, fogFactor );
}
else
{
gl_FragColor = gl_FragColor;			
};

}