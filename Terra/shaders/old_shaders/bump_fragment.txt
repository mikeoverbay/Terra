// bump_fragment.txt
// used to render all building and other models

uniform sampler2D normalMap;
uniform sampler2D colorMap;
uniform sampler2D colorMap_2;
uniform int enable_fog;
uniform float l_texture;
uniform int is_bumped;
uniform int is_multi_textured;
uniform float gamma;
varying vec2 texCoord_0;
varying vec2 texCoord_1;
varying vec3 norm;
varying vec3 halfVector;
varying vec3 eyeVec;
varying float ln;
void main (void)
{
vec3 halfV,lightDir;
float NdotL,NdotHV;
 
lightDir = normalize( gl_LightSource[0].position.xyz);
halfV = normalize(halfVector);

lightDir.x *= -1.0;
vec3 n = normalize(norm);
   
vec4 base = texture2D(colorMap, texCoord_0);

//base = texture2D(colorMap, texCoord_0);

if ( base.a <0.3 ) { discard; }
base.xyz *= l_texture;

vec3 bump = texture2D(normalMap, texCoord_0).rgb * 2.0 - 1.0;
float alpha_ch = texture2D(normalMap, texCoord_0).a;


bump.x *= -1.0;
bump =  normalize(bump);

   //----------------------------------------
   vec4 Ambient = vec4( 0.5 ,0.5 , 0.5 , 0.0);
   vec4 color = Ambient;

NdotL = max(dot(n*0.3, lightDir.xzy),0.0);
// calculate bump

//bump.xz *= n.y;
float diffuse = max(dot(bump  ,lightDir.xzy), 0.0);

float specular = clamp( dot(reflect(bump,lightDir.xzy), halfV), 0.25, 0.4);
specular *= alpha_ch ;

  if (NdotL > 0.0) {
     color += Ambient * NdotL;
    }
if (is_bumped == 0) { diffuse = 0.3; }
gl_FragColor = base * (clamp ((diffuse * color),0.0, 0.20 ) + specular ) *ln ;
gl_FragColor += clamp((color * base*.7), 0.0, 1.0) * (1.0 - ln);
if (is_multi_textured == 1) {
vec4 d2 = ( texture2D(colorMap_2, texCoord_1) );
gl_FragColor  *=d2;
gl_FragColor *= 1.2;

}
gl_FragColor *= 2.5;
// gamma correction
vec3 vG = vec3(1.0 , 1.0 , 1.0);
gl_FragColor.rgb = pow(gl_FragColor.rgb, vG/gamma);

//======================================================
//eyeVec = normalize(eyeVec);
//Debug junk
//gl_FragColor.xyz =  diffuse + color;
//gl_FragColor.r +=  (atan(-eyeVec.y, (eyeVec.x+eyeVec.z)/2) )/1.570796327;
//gl_FragColor =  color+ diffuse;
//======================================================

// FOG calculation
 const float LOG2 = 1.442695;

float z = gl_FragCoord.z / gl_FragCoord.w;
float fogFactor = exp2( -gl_Fog.density * gl_Fog.density * z * z * LOG2 );
fogFactor = clamp(fogFactor, 0.0, 1.0);
if (enable_fog == 1)
{
gl_FragColor = mix(gl_Fog.color, gl_FragColor, fogFactor );
}
else
{
gl_FragColor = gl_FragColor;         
};

}